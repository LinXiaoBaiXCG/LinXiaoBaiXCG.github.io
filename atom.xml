<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinChuangQiong&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linxiaobaixcg.github.io/"/>
  <updated>2022-06-29T16:35:49.342Z</updated>
  <id>https://linxiaobaixcg.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IO线程模型</title>
    <link href="https://linxiaobaixcg.github.io/2022/06/29/IO%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://linxiaobaixcg.github.io/2022/06/29/IO线程模型/</id>
    <published>2022-06-29T12:00:00.000Z</published>
    <updated>2022-06-29T16:35:49.342Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 线程模型通常是指线程的使用方式。在 Java I/O 中，主要有 2 种线程模型，即传统的阻塞式 I/O 模型和 Reactor 模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;传统的阻塞式线程I-O&quot;&gt;&lt;a href=&quot;#传统的阻塞
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="https://linxiaobaixcg.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中，22个写SQL的好习惯</title>
    <link href="https://linxiaobaixcg.github.io/2022/03/02/MySQL%E4%B8%AD%EF%BC%8C22%E4%B8%AA%E5%86%99SQL%E7%9A%84%E5%A5%BD%E4%B9%A0%E6%83%AF/"/>
    <id>https://linxiaobaixcg.github.io/2022/03/02/MySQL中，22个写SQL的好习惯/</id>
    <published>2022-03-02T12:00:00.000Z</published>
    <updated>2022-03-02T03:05:20.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 好习惯，利己利他。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;写完SQL先explain查看执行计划（SQL性能优化）&quot;&gt;&lt;a href=&quot;#写完SQL先explain查看执行计划（SQL性能优化）&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据库" scheme="https://linxiaobaixcg.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>选择Undertow替代Tomcat</title>
    <link href="https://linxiaobaixcg.github.io/2022/01/25/%E9%80%89%E6%8B%A9Undertow%E6%9B%BF%E4%BB%A3Tomcat/"/>
    <id>https://linxiaobaixcg.github.io/2022/01/25/选择Undertow替代Tomcat/</id>
    <published>2022-01-25T12:00:00.000Z</published>
    <updated>2022-01-26T15:01:32.634Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 一个更适合高并发系统的Web服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt; Spring Boot支持三个内
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring集合" scheme="https://linxiaobaixcg.github.io/tags/Spring%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Netty核心组件介绍</title>
    <link href="https://linxiaobaixcg.github.io/2021/05/17/Netty%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://linxiaobaixcg.github.io/2021/05/17/Netty核心组件介绍/</id>
    <published>2021-05-17T12:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 理解Netty核心组件并使用netty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Netty核心组件&quot;&gt;&lt;a href=&quot;#Netty核心组件&quot; class=&quot;headerlink&quot; title=&quot;Netty核心组件&quot;&gt;&lt;/a&gt;Nett
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="https://linxiaobaixcg.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker搭建MongoDB副本集</title>
    <link href="https://linxiaobaixcg.github.io/2021/05/02/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAMongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <id>https://linxiaobaixcg.github.io/2021/05/02/使用Docker搭建MongoDB副本集/</id>
    <published>2021-05-02T12:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 实现MongoDB高可用服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;mongodb集群搭建有三种方式。&lt;/p
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="DevOps" scheme="https://linxiaobaixcg.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>TCP的三次握手和四次挥手</title>
    <link href="https://linxiaobaixcg.github.io/2021/04/24/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://linxiaobaixcg.github.io/2021/04/24/TCP的三次握手和四次挥手/</id>
    <published>2021-04-24T12:00:00.000Z</published>
    <updated>2022-01-20T17:48:49.128Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TCP连接&quot;&gt;&lt;a href=&quot;#TCP连接&quot; class=&quot;headerlink&quot; title=&quot;TCP连接&quot;&gt;&lt;/a&gt;TCP连接&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/04/24/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="https://linxiaobaixcg.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>TCP流量控制和拥塞控制</title>
    <link href="https://linxiaobaixcg.github.io/2021/04/07/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E5%92%8C%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    <id>https://linxiaobaixcg.github.io/2021/04/07/TCP流量控制和拥塞控制/</id>
    <published>2021-04-07T12:00:00.000Z</published>
    <updated>2022-01-20T17:48:49.123Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 流量控制和拥塞控制是TCP实现可靠传输的方法之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;流量控制&quot;&gt;&lt;a href=&quot;#流量控制&quot; class=&quot;headerlink&quot; title=&quot;流量控制&quot;&gt;&lt;/a&gt;流量控制&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="https://linxiaobaixcg.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈计算机网络中的三种可靠传输机制</title>
    <link href="https://linxiaobaixcg.github.io/2021/04/02/%E6%B5%85%E8%B0%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E6%9C%BA%E5%88%B6/"/>
    <id>https://linxiaobaixcg.github.io/2021/04/02/浅谈计算机网络中的三种可靠传输机制/</id>
    <published>2021-04-02T12:00:00.000Z</published>
    <updated>2022-01-20T17:48:49.127Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 计算机网络中，有不可靠传输服务和可靠传输服务。不可靠传输服务对传输过程中出现的差错（比特差错、分组丢失、分组失序和分组重复）不做处理，但是可靠传输服务需要对传输过程中出现的差错进行有效的解决，保证发送方发送了什么数据接收放就收到什么数据，这就需要
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="https://linxiaobaixcg.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Unix系统下的五种IO模型</title>
    <link href="https://linxiaobaixcg.github.io/2021/03/10/Unix%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/"/>
    <id>https://linxiaobaixcg.github.io/2021/03/10/Unix系统下的五种IO模型/</id>
    <published>2021-03-10T12:00:00.000Z</published>
    <updated>2022-01-20T17:36:53.540Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Unix系统下，I/O模型一共有五种：同步阻塞I/O、同步非阻塞I/O、I/O多路复用、信号驱动I/O和异步I/O&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;I-O&quot;&gt;&lt;a href=&quot;#I-O&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="https://linxiaobaixcg.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中order by与limit一起使用存在的陷阱和解决方法</title>
    <link href="https://linxiaobaixcg.github.io/2021/03/01/MySQL/"/>
    <id>https://linxiaobaixcg.github.io/2021/03/01/MySQL/</id>
    <published>2021-03-01T12:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;近期，在使用MySQL时， SQL语句同时使用order by、limit时，发现数据有重复的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据库" scheme="https://linxiaobaixcg.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>API接口签名实现</title>
    <link href="https://linxiaobaixcg.github.io/2021/02/04/API%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D%E5%AE%9E%E7%8E%B0/"/>
    <id>https://linxiaobaixcg.github.io/2021/02/04/API接口签名实现/</id>
    <published>2021-02-04T12:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 近期，公司小游戏涉及上传得分操作，为防止用户通过篡改接口数据刷游戏榜单获得奖金。最终通过签名的方式设计接口，解决数据被篡改问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="安全" scheme="https://linxiaobaixcg.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>解决Spring Boot异步上传文件提示无法找到文件问题</title>
    <link href="https://linxiaobaixcg.github.io/2021/01/20/%E8%A7%A3%E5%86%B3Spring%20Boot%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%8F%90%E7%A4%BA%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://linxiaobaixcg.github.io/2021/01/20/解决Spring Boot异步上传文件提示无法找到文件问题/</id>
    <published>2021-01-20T12:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;使用Spring Boot上传文件进行操作时，为了减少客户端等待耗时，选择使用异步实现后报&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring集合" scheme="https://linxiaobaixcg.github.io/tags/Spring%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机字节码执行引擎</title>
    <link href="https://linxiaobaixcg.github.io/2020/12/15/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <id>https://linxiaobaixcg.github.io/2020/12/15/虚拟机字节码执行引擎/</id>
    <published>2020-12-15T12:00:00.000Z</published>
    <updated>2022-01-20T17:44:40.756Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读《深入理解Java虚拟机》记录&lt;br&gt; 所谓的「虚拟机字节码执行引擎」其实就是 JVM 根据 Class 文件中给出的字节码指令，基于栈解释器的一种执行机制。通俗点来说，也就是 JVM 解析字节码指令，输出运行结果的一个过程。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="技术书籍" scheme="https://linxiaobaixcg.github.io/tags/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="JVM" scheme="https://linxiaobaixcg.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机类加载机制</title>
    <link href="https://linxiaobaixcg.github.io/2020/12/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>https://linxiaobaixcg.github.io/2020/12/08/虚拟机类加载机制/</id>
    <published>2020-12-08T12:00:00.000Z</published>
    <updated>2022-01-20T17:43:50.552Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读《深入理解Java虚拟机》记录&lt;/p&gt;
&lt;p&gt; 虚拟机把类的数据从Class文件(这里的Class文件可以是javac编译成的class文件，也可以是反射或者动态代理生成的class二进制流，或者网络传输的二进制流等等)加载到内存，并对数据进行
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="技术书籍" scheme="https://linxiaobaixcg.github.io/tags/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="JVM" scheme="https://linxiaobaixcg.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>垃圾收集器</title>
    <link href="https://linxiaobaixcg.github.io/2020/11/10/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://linxiaobaixcg.github.io/2020/11/10/垃圾收集器/</id>
    <published>2020-11-10T12:00:00.000Z</published>
    <updated>2022-01-20T17:48:49.124Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读《深入理解Java虚拟机》记录&lt;/p&gt;
&lt;p&gt; 当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就需要对这些“自动化”的技术实施必要的监控和调节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Jav
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="技术书籍" scheme="https://linxiaobaixcg.github.io/tags/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="JVM" scheme="https://linxiaobaixcg.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java运行时数据区域</title>
    <link href="https://linxiaobaixcg.github.io/2020/10/29/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/"/>
    <id>https://linxiaobaixcg.github.io/2020/10/29/Java运行时数据区域/</id>
    <published>2020-10-28T16:00:00.000Z</published>
    <updated>2022-01-20T17:48:49.125Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读《深入理解Java虚拟机》记录&lt;/p&gt;
&lt;p&gt; Java 虚拟机有自动内存管理机制，但如果出现内存泄漏和溢出方面的问题，排查错误、修正问题就必须要了解虚拟机是怎样使用内存的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Java运行时数
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="技术书籍" scheme="https://linxiaobaixcg.github.io/tags/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="JVM" scheme="https://linxiaobaixcg.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>软件系统中常见的加密算法和实现</title>
    <link href="https://linxiaobaixcg.github.io/2020/10/10/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://linxiaobaixcg.github.io/2020/10/10/软件系统中常见的加密算法/</id>
    <published>2020-10-10T12:00:00.000Z</published>
    <updated>2022-01-20T17:43:50.547Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 数字签名、信息加密是前后端开发都经常需要使用到的技术，应用场景包括了用户登入、交易、信息通讯、oauth 等等，不同的应用场景也会需要使用到不同的签名加密算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数字签名&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="https://linxiaobaixcg.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx配置HTTPS和前端多目录部署</title>
    <link href="https://linxiaobaixcg.github.io/2020/09/28/%E4%BD%BF%E7%94%A8Nginx%E9%85%8D%E7%BD%AEHTTPS%E5%92%8C%E5%89%8D%E7%AB%AF%E5%A4%9A%E7%9B%AE%E5%BD%95%E9%83%A8%E7%BD%B2/"/>
    <id>https://linxiaobaixcg.github.io/2020/09/28/使用Nginx配置HTTPS和前端多目录部署/</id>
    <published>2020-09-28T12:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; Nginx的实践 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开启Nginx的SSL模块&quot;&gt;&lt;a href=&quot;#开启Nginx的SSL模块&quot; class=&quot;headerlink&quot; title=&quot;开启Nginx的SSL模块&quot;&gt;&lt;/a&gt;开启
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="中间件" scheme="https://linxiaobaixcg.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用ELK做日志收集</title>
    <link href="https://linxiaobaixcg.github.io/2020/08/31/%E4%BD%BF%E7%94%A8ELK%E5%81%9A%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <id>https://linxiaobaixcg.github.io/2020/08/31/使用ELK做日志收集/</id>
    <published>2020-08-30T16:00:00.000Z</published>
    <updated>2021-11-20T15:34:50.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 微服务系统的日志都保存在各自指定的目录中，如果这些微服务部署在不同的服务器上，那么日志文件也是分散在各自的服务器上。分散的日志不利于我们快速通过日志定位问题，我们可以借助ELK来收集各个微服务系统的日志并集中展示。&lt;br&gt;ELK即Elastics
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="中间件" scheme="https://linxiaobaixcg.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入WEB请求过程</title>
    <link href="https://linxiaobaixcg.github.io/2020/07/21/%E6%B7%B1%E5%85%A5WEB%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
    <id>https://linxiaobaixcg.github.io/2020/07/21/深入WEB请求过程/</id>
    <published>2020-07-21T12:00:00.000Z</published>
    <updated>2022-01-20T17:48:49.117Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读《深入分析Java Web技术内幕》记录&lt;/p&gt;
&lt;p&gt; 随着Web 2.0时代的到来，互联网的网络架构已经从传统的 &lt;code&gt;C/S&lt;/code&gt; 架构转变为更加方便、快捷的 &lt;code&gt;B/S&lt;/code&gt; 架构，B/S 架构大大简化了用
      
    
    </summary>
    
      <category term="编程" scheme="https://linxiaobaixcg.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="https://linxiaobaixcg.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
